/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateServerSessionDto,
  CreateServerSessionResponseEntity,
  ServerInfoEntity,
  UpdateServerInfoDto
} from '../../models';

import { customFetch } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const serversessionsControllerCreate = (
    createServerSessionDto: CreateServerSessionDto,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<CreateServerSessionResponseEntity>(
      {url: `http://localhost:3000/v1/server-sessions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createServerSessionDto, signal
    },
      options);
    }
  


export const getServersessionsControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext> => {

const mutationKey = ['serversessionsControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof serversessionsControllerCreate>>, {data: CreateServerSessionDto}> = (props) => {
          const {data} = props ?? {};

          return  serversessionsControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ServersessionsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerCreate>>>
    export type ServersessionsControllerCreateMutationBody = CreateServerSessionDto
    export type ServersessionsControllerCreateMutationError = void

    export const useServersessionsControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof serversessionsControllerCreate>>,
        TError,
        {data: CreateServerSessionDto},
        TContext
      > => {

      const mutationOptions = getServersessionsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const serversessionsControllerGetList = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<CreateServerSessionResponseEntity[]>(
      {url: `http://localhost:3000/v1/server-sessions`, method: 'GET', signal
    },
      options);
    }
  

export const getServersessionsControllerGetListQueryKey = () => {
    return [`http://localhost:3000/v1/server-sessions`] as const;
    }

    
export const getServersessionsControllerGetListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof serversessionsControllerGetList>>>, TError = void>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getServersessionsControllerGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof serversessionsControllerGetList>>> = ({ signal }) => serversessionsControllerGetList(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServersessionsControllerGetListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerGetList>>>
export type ServersessionsControllerGetListInfiniteQueryError = void


export function useServersessionsControllerGetListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof serversessionsControllerGetList>>>, TError = void>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof serversessionsControllerGetList>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof serversessionsControllerGetList>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useServersessionsControllerGetListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof serversessionsControllerGetList>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getServersessionsControllerGetListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getServersessionsControllerGetListQueryOptions = <TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getServersessionsControllerGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof serversessionsControllerGetList>>> = ({ signal }) => serversessionsControllerGetList(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServersessionsControllerGetListQueryResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerGetList>>>
export type ServersessionsControllerGetListQueryError = void


export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getServersessionsControllerGetListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const serversessionsControllerUpdateServerInfo = (
    updateServerInfoDto: UpdateServerInfoDto,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<ServerInfoEntity>(
      {url: `http://localhost:3000/v1/server-sessions/update-server-info`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateServerInfoDto, signal
    },
      options);
    }
  


export const getServersessionsControllerUpdateServerInfoMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext> => {

const mutationKey = ['serversessionsControllerUpdateServerInfo'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, {data: UpdateServerInfoDto}> = (props) => {
          const {data} = props ?? {};

          return  serversessionsControllerUpdateServerInfo(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ServersessionsControllerUpdateServerInfoMutationResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>>
    export type ServersessionsControllerUpdateServerInfoMutationBody = UpdateServerInfoDto
    export type ServersessionsControllerUpdateServerInfoMutationError = void

    export const useServersessionsControllerUpdateServerInfo = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
        TError,
        {data: UpdateServerInfoDto},
        TContext
      > => {

      const mutationOptions = getServersessionsControllerUpdateServerInfoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    