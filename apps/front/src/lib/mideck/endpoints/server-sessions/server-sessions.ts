/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateServerSessionDto,
  CreateServerSessionResponseEntity,
  ServerInfoEntity,
  UpdateServerInfoDto
} from '../../models';





export type serversessionsControllerCreateResponse201 = {
  data: CreateServerSessionResponseEntity
  status: 201
}

export type serversessionsControllerCreateResponse401 = {
  data: void
  status: 401
}
    
export type serversessionsControllerCreateResponseComposite = serversessionsControllerCreateResponse201 | serversessionsControllerCreateResponse401;
    
export type serversessionsControllerCreateResponse = serversessionsControllerCreateResponseComposite & {
  headers: Headers;
}

export const getServersessionsControllerCreateUrl = () => {


  

  return `/v1/server-sessions`
}

export const serversessionsControllerCreate = async (createServerSessionDto: CreateServerSessionDto, options?: RequestInit): Promise<serversessionsControllerCreateResponse> => {
  
  const res = await fetch(getServersessionsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createServerSessionDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: serversessionsControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as serversessionsControllerCreateResponse
}




export const getServersessionsControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext> => {

const mutationKey = ['serversessionsControllerCreate'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof serversessionsControllerCreate>>, {data: CreateServerSessionDto}> = (props) => {
          const {data} = props ?? {};

          return  serversessionsControllerCreate(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ServersessionsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerCreate>>>
    export type ServersessionsControllerCreateMutationBody = CreateServerSessionDto
    export type ServersessionsControllerCreateMutationError = void

    export const useServersessionsControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerCreate>>, TError,{data: CreateServerSessionDto}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof serversessionsControllerCreate>>,
        TError,
        {data: CreateServerSessionDto},
        TContext
      > => {

      const mutationOptions = getServersessionsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export type serversessionsControllerGetListResponse201 = {
  data: CreateServerSessionResponseEntity[]
  status: 201
}

export type serversessionsControllerGetListResponse401 = {
  data: void
  status: 401
}
    
export type serversessionsControllerGetListResponseComposite = serversessionsControllerGetListResponse201 | serversessionsControllerGetListResponse401;
    
export type serversessionsControllerGetListResponse = serversessionsControllerGetListResponseComposite & {
  headers: Headers;
}

export const getServersessionsControllerGetListUrl = () => {


  

  return `/v1/server-sessions`
}

export const serversessionsControllerGetList = async ( options?: RequestInit): Promise<serversessionsControllerGetListResponse> => {
  
  const res = await fetch(getServersessionsControllerGetListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: serversessionsControllerGetListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as serversessionsControllerGetListResponse
}



export const getServersessionsControllerGetListQueryKey = () => {
    return [`/v1/server-sessions`] as const;
    }

    
export const getServersessionsControllerGetListQueryOptions = <TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getServersessionsControllerGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof serversessionsControllerGetList>>> = ({ signal }) => serversessionsControllerGetList({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServersessionsControllerGetListQueryResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerGetList>>>
export type ServersessionsControllerGetListQueryError = void


export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useServersessionsControllerGetList<TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof serversessionsControllerGetList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getServersessionsControllerGetListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type serversessionsControllerUpdateServerInfoResponse201 = {
  data: ServerInfoEntity
  status: 201
}

export type serversessionsControllerUpdateServerInfoResponse401 = {
  data: void
  status: 401
}
    
export type serversessionsControllerUpdateServerInfoResponseComposite = serversessionsControllerUpdateServerInfoResponse201 | serversessionsControllerUpdateServerInfoResponse401;
    
export type serversessionsControllerUpdateServerInfoResponse = serversessionsControllerUpdateServerInfoResponseComposite & {
  headers: Headers;
}

export const getServersessionsControllerUpdateServerInfoUrl = () => {


  

  return `/v1/server-sessions/update-server-info`
}

export const serversessionsControllerUpdateServerInfo = async (updateServerInfoDto: UpdateServerInfoDto, options?: RequestInit): Promise<serversessionsControllerUpdateServerInfoResponse> => {
  
  const res = await fetch(getServersessionsControllerUpdateServerInfoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateServerInfoDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: serversessionsControllerUpdateServerInfoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as serversessionsControllerUpdateServerInfoResponse
}




export const getServersessionsControllerUpdateServerInfoMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext> => {

const mutationKey = ['serversessionsControllerUpdateServerInfo'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, {data: UpdateServerInfoDto}> = (props) => {
          const {data} = props ?? {};

          return  serversessionsControllerUpdateServerInfo(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ServersessionsControllerUpdateServerInfoMutationResult = NonNullable<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>>
    export type ServersessionsControllerUpdateServerInfoMutationBody = UpdateServerInfoDto
    export type ServersessionsControllerUpdateServerInfoMutationError = void

    export const useServersessionsControllerUpdateServerInfo = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>, TError,{data: UpdateServerInfoDto}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
        TError,
        {data: UpdateServerInfoDto},
        TContext
      > => {

      const mutationOptions = getServersessionsControllerUpdateServerInfoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    