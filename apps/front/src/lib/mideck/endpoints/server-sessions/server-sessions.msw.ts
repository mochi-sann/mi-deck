/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  CreateServerSessionResponseEntity,
  ServerInfoEntity
} from '../../models';


export const getServersessionsControllerCreateResponseMock = (overrideResponse: Partial< CreateServerSessionResponseEntity > = {}): CreateServerSessionResponseEntity => ({id: faker.string.uuid(), userId: faker.string.uuid(), origin: faker.string.alpha(20), serverToken: faker.string.alpha(20), serverType: faker.helpers.arrayElement(['Misskey','OtherServer'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getServersessionsControllerGetListResponseMock = (): CreateServerSessionResponseEntity[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), userId: faker.string.uuid(), origin: faker.string.alpha(20), serverToken: faker.string.alpha(20), serverType: faker.helpers.arrayElement(['Misskey','OtherServer'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getServersessionsControllerUpdateServerInfoResponseMock = (overrideResponse: Partial< ServerInfoEntity > = {}): ServerInfoEntity => ({id: faker.string.uuid(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.string.alpha(20), serverSessionId: faker.string.uuid(), iconUrl: faker.string.alpha(20), faviconUrl: faker.string.alpha(20), themeColor: faker.string.alpha(20), ...overrideResponse})


export const getServersessionsControllerCreateMockHandler = (overrideResponse?: CreateServerSessionResponseEntity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateServerSessionResponseEntity> | CreateServerSessionResponseEntity)) => {
  return http.post('*/v1/server-sessions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServersessionsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServersessionsControllerGetListMockHandler = (overrideResponse?: CreateServerSessionResponseEntity[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CreateServerSessionResponseEntity[]> | CreateServerSessionResponseEntity[])) => {
  return http.get('*/v1/server-sessions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServersessionsControllerGetListResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServersessionsControllerUpdateServerInfoMockHandler = (overrideResponse?: ServerInfoEntity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServerInfoEntity> | ServerInfoEntity)) => {
  return http.post('*/v1/server-sessions/update-server-info', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServersessionsControllerUpdateServerInfoResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getServerSessionsMock = () => [
  getServersessionsControllerCreateMockHandler(),
  getServersessionsControllerGetListMockHandler(),
  getServersessionsControllerUpdateServerInfoMockHandler()
]
