/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  LoginEntity,
  MeEntity
} from '../../models';


export const getAuthControllerLoginResponseMock = (overrideResponse: Partial< LoginEntity > = {}): LoginEntity => ({accessToken: faker.string.alpha(20), ...overrideResponse})

export const getAuthControllerSignUpResponseMock = (overrideResponse: Partial< LoginEntity > = {}): LoginEntity => ({accessToken: faker.string.alpha(20), ...overrideResponse})

export const getAuthControllerGetProfileResponseMock = (overrideResponse: Partial< MeEntity > = {}): MeEntity => ({id: faker.string.alpha(20), email: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})


export const getAuthControllerLoginMockHandler = (overrideResponse?: LoginEntity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LoginEntity> | LoginEntity)) => {
  return http.post('*/v1/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerSignUpMockHandler = (overrideResponse?: LoginEntity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LoginEntity> | LoginEntity)) => {
  return http.post('*/v1/auth/signUp', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerSignUpResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerGetProfileMockHandler = (overrideResponse?: MeEntity | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MeEntity> | MeEntity)) => {
  return http.get('*/v1/auth/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerGetProfileResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerLogoutMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/v1/auth/logout', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getAuthMock = () => [
  getAuthControllerLoginMockHandler(),
  getAuthControllerSignUpMockHandler(),
  getAuthControllerGetProfileMockHandler(),
  getAuthControllerLogoutMockHandler()
]
