/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type {
  CreateServerSessionResponseEntity,
  LoginEntity,
  MeEntity,
  ServerInfoEntity,
  TimelineControllerFindOne200Item,
  TimelineEntity,
  TimelineWithServerSessionEntity,
} from "../models";

export const getAuthControllerLoginResponseMock = (
  overrideResponse: Partial<LoginEntity> = {},
): LoginEntity => ({
  accessToken: faker.string.alpha(20),
  ...overrideResponse,
});

export const getAuthControllerSignUpResponseMock = (
  overrideResponse: Partial<LoginEntity> = {},
): LoginEntity => ({
  accessToken: faker.string.alpha(20),
  ...overrideResponse,
});

export const getAuthControllerGetProfileResponseMock = (
  overrideResponse: Partial<MeEntity> = {},
): MeEntity => ({
  id: faker.string.alpha(20),
  email: faker.string.alpha(20),
  name: faker.string.alpha(20),
  ...overrideResponse,
});

export const getServersessionsControllerCreateResponseMock = (
  overrideResponse: Partial<CreateServerSessionResponseEntity> = {},
): CreateServerSessionResponseEntity => ({
  id: faker.string.uuid(),
  userId: faker.string.uuid(),
  origin: faker.string.alpha(20),
  serverToken: faker.string.alpha(20),
  serverType: faker.helpers.arrayElement(["Misskey", "OtherServer"] as const),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getServersessionsControllerGetListResponseMock =
  (): CreateServerSessionResponseEntity[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.uuid(),
      userId: faker.string.uuid(),
      origin: faker.string.alpha(20),
      serverToken: faker.string.alpha(20),
      serverType: faker.helpers.arrayElement([
        "Misskey",
        "OtherServer",
      ] as const),
      createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    }));

export const getServersessionsControllerUpdateServerInfoResponseMock = (
  overrideResponse: Partial<ServerInfoEntity> = {},
): ServerInfoEntity => ({
  id: faker.string.uuid(),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha(20),
  serverSessionId: faker.string.uuid(),
  iconUrl: faker.string.alpha(20),
  faviconUrl: faker.string.alpha(20),
  themeColor: faker.string.alpha(20),
  ...overrideResponse,
});

export const getTimelineControllerCreateResponseMock = (
  overrideResponse: Partial<TimelineEntity> = {},
): TimelineEntity => ({
  id: faker.string.uuid(),
  serverSessionId: faker.string.uuid(),
  name: faker.string.alpha(20),
  type: faker.helpers.arrayElement([
    "HOME",
    "LOCAL",
    "GLOBAL",
    "LIST",
    "USER",
    "CHANNEL",
  ] as const),
  listId: faker.helpers.arrayElement([{}, undefined]),
  channelId: faker.helpers.arrayElement([{}, undefined]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getTimelineControllerFindAllResponseMock =
  (): TimelineWithServerSessionEntity[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.uuid(),
      serverSessionId: faker.string.uuid(),
      name: faker.string.alpha(20),
      type: faker.helpers.arrayElement([
        "HOME",
        "LOCAL",
        "GLOBAL",
        "LIST",
        "USER",
        "CHANNEL",
      ] as const),
      listId: faker.helpers.arrayElement([{}, undefined]),
      channelId: faker.helpers.arrayElement([{}, undefined]),
      createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
      serverSession: {
        ...{
          id: faker.string.uuid(),
          origin: faker.string.alpha(20),
          serverType: faker.helpers.arrayElement([
            "Misskey",
            "OtherServer",
          ] as const),
          serverToken: faker.string.alpha(20),
        },
      },
    }));

export const getTimelineControllerFindOneResponseMock =
  (): TimelineControllerFindOne200Item[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}));

export const getAppControllerGetHelloMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/v1", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAuthControllerLoginMockHandler = (
  overrideResponse?:
    | LoginEntity
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginEntity> | LoginEntity),
) => {
  return http.post("*/v1/auth/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthControllerLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthControllerSignUpMockHandler = (
  overrideResponse?:
    | LoginEntity
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginEntity> | LoginEntity),
) => {
  return http.post("*/v1/auth/signUp", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthControllerSignUpResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthControllerGetProfileMockHandler = (
  overrideResponse?:
    | MeEntity
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeEntity> | MeEntity),
) => {
  return http.get("*/v1/auth/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthControllerGetProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthControllerLogoutMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/v1/auth/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getServersessionsControllerCreateMockHandler = (
  overrideResponse?:
    | CreateServerSessionResponseEntity
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<CreateServerSessionResponseEntity>
        | CreateServerSessionResponseEntity),
) => {
  return http.post("*/v1/server-sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getServersessionsControllerCreateResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getServersessionsControllerGetListMockHandler = (
  overrideResponse?:
    | CreateServerSessionResponseEntity[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<CreateServerSessionResponseEntity[]>
        | CreateServerSessionResponseEntity[]),
) => {
  return http.get("*/v1/server-sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getServersessionsControllerGetListResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getServersessionsControllerUpdateServerInfoMockHandler = (
  overrideResponse?:
    | ServerInfoEntity
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ServerInfoEntity> | ServerInfoEntity),
) => {
  return http.post("*/v1/server-sessions/update-server-info", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getServersessionsControllerUpdateServerInfoResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTimelineControllerCreateMockHandler = (
  overrideResponse?:
    | TimelineEntity
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TimelineEntity> | TimelineEntity),
) => {
  return http.post("*/v1/timeline", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTimelineControllerCreateResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTimelineControllerFindAllMockHandler = (
  overrideResponse?:
    | TimelineWithServerSessionEntity[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<TimelineWithServerSessionEntity[]>
        | TimelineWithServerSessionEntity[]),
) => {
  return http.get("*/v1/timeline", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTimelineControllerFindAllResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTimelineControllerFindOneMockHandler = (
  overrideResponse?:
    | TimelineControllerFindOne200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<TimelineControllerFindOne200Item[]>
        | TimelineControllerFindOne200Item[]),
) => {
  return http.get("*/v1/timeline/:serverSessionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTimelineControllerFindOneResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getMiDeckApiMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAuthControllerLoginMockHandler(),
  getAuthControllerSignUpMockHandler(),
  getAuthControllerGetProfileMockHandler(),
  getAuthControllerLogoutMockHandler(),
  getServersessionsControllerCreateMockHandler(),
  getServersessionsControllerGetListMockHandler(),
  getServersessionsControllerUpdateServerInfoMockHandler(),
  getTimelineControllerCreateMockHandler(),
  getTimelineControllerFindAllMockHandler(),
  getTimelineControllerFindOneMockHandler(),
];
