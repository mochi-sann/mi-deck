/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateServerSessionDto,
  CreateServerSessionResponseEntity,
  CreateTimelineDto,
  LoginDto,
  LoginEntity,
  MeEntity,
  ServerInfoEntity,
  SignUpDto,
  TimelineControllerFindOne200Item,
  TimelineEntity,
  TimelineWithServerSessionEntity,
  UpdateServerInfoDto,
} from "../models";

export type appControllerGetHelloResponse200 = {
  data: void;
  status: 200;
};

export type appControllerGetHelloResponseComposite =
  appControllerGetHelloResponse200;

export type appControllerGetHelloResponse =
  appControllerGetHelloResponseComposite & {
    headers: Headers;
  };

export const getAppControllerGetHelloUrl = () => {
  return `/v1`;
};

export const appControllerGetHello = async (
  options?: RequestInit,
): Promise<appControllerGetHelloResponse> => {
  const res = await fetch(getAppControllerGetHelloUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: appControllerGetHelloResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as appControllerGetHelloResponse;
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/v1`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type authControllerLoginResponse200 = {
  data: LoginEntity;
  status: 200;
};

export type authControllerLoginResponse401 = {
  data: void;
  status: 401;
};

export type authControllerLoginResponseComposite =
  | authControllerLoginResponse200
  | authControllerLoginResponse401;

export type authControllerLoginResponse =
  authControllerLoginResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerLoginUrl = () => {
  return `/v1/auth/login`;
};

export const authControllerLogin = async (
  loginDto: LoginDto,
  options?: RequestInit,
): Promise<authControllerLoginResponse> => {
  const res = await fetch(getAuthControllerLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginDto),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authControllerLoginResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authControllerLoginResponse;
};

export const getAuthControllerLoginMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = void;

export const useAuthControllerLogin = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type authControllerSignUpResponse201 = {
  data: LoginEntity;
  status: 201;
};

export type authControllerSignUpResponse401 = {
  data: void;
  status: 401;
};

export type authControllerSignUpResponseComposite =
  | authControllerSignUpResponse201
  | authControllerSignUpResponse401;

export type authControllerSignUpResponse =
  authControllerSignUpResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerSignUpUrl = () => {
  return `/v1/auth/signUp`;
};

export const authControllerSignUp = async (
  signUpDto: SignUpDto,
  options?: RequestInit,
): Promise<authControllerSignUpResponse> => {
  const res = await fetch(getAuthControllerSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpDto),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authControllerSignUpResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authControllerSignUpResponse;
};

export const getAuthControllerSignUpMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    TError,
    { data: SignUpDto },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignUp>>,
  TError,
  { data: SignUpDto },
  TContext
> => {
  const mutationKey = ["authControllerSignUp"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    { data: SignUpDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignUp(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignUpMutationBody = SignUpDto;
export type AuthControllerSignUpMutationError = void;

export const useAuthControllerSignUp = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignUp>>,
      TError,
      { data: SignUpDto },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignUp>>,
  TError,
  { data: SignUpDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type authControllerGetProfileResponse200 = {
  data: MeEntity;
  status: 200;
};

export type authControllerGetProfileResponse401 = {
  data: void;
  status: 401;
};

export type authControllerGetProfileResponseComposite =
  | authControllerGetProfileResponse200
  | authControllerGetProfileResponse401;

export type authControllerGetProfileResponse =
  authControllerGetProfileResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerGetProfileUrl = () => {
  return `/v1/auth/me`;
};

export const authControllerGetProfile = async (
  options?: RequestInit,
): Promise<authControllerGetProfileResponse> => {
  const res = await fetch(getAuthControllerGetProfileUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authControllerGetProfileResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authControllerGetProfileResponse;
};

export const getAuthControllerGetProfileQueryKey = () => {
  return [`/v1/auth/me`] as const;
};

export const getAuthControllerGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGetProfile>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGetProfile>>
  > = ({ signal }) => authControllerGetProfile({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetProfile>>
>;
export type AuthControllerGetProfileQueryError = void;

export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetProfile>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetProfile>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGetProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type authControllerLogoutResponse201 = {
  data: void;
  status: 201;
};

export type authControllerLogoutResponseComposite =
  authControllerLogoutResponse201;

export type authControllerLogoutResponse =
  authControllerLogoutResponseComposite & {
    headers: Headers;
  };

export const getAuthControllerLogoutUrl = () => {
  return `/v1/auth/logout`;
};

export const authControllerLogout = async (
  options?: RequestInit,
): Promise<authControllerLogoutResponse> => {
  const res = await fetch(getAuthControllerLogoutUrl(), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authControllerLogoutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authControllerLogoutResponse;
};

export const getAuthControllerLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerLogout"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    void
  > = () => {
    return authControllerLogout(fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;

export type AuthControllerLogoutMutationError = unknown;

export const useAuthControllerLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogout>>,
      TError,
      void,
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type serversessionsControllerCreateResponse201 = {
  data: CreateServerSessionResponseEntity;
  status: 201;
};

export type serversessionsControllerCreateResponse401 = {
  data: void;
  status: 401;
};

export type serversessionsControllerCreateResponseComposite =
  | serversessionsControllerCreateResponse201
  | serversessionsControllerCreateResponse401;

export type serversessionsControllerCreateResponse =
  serversessionsControllerCreateResponseComposite & {
    headers: Headers;
  };

export const getServersessionsControllerCreateUrl = () => {
  return `/v1/server-sessions`;
};

export const serversessionsControllerCreate = async (
  createServerSessionDto: CreateServerSessionDto,
  options?: RequestInit,
): Promise<serversessionsControllerCreateResponse> => {
  const res = await fetch(getServersessionsControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createServerSessionDto),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: serversessionsControllerCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as serversessionsControllerCreateResponse;
};

export const getServersessionsControllerCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serversessionsControllerCreate>>,
    TError,
    { data: CreateServerSessionDto },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof serversessionsControllerCreate>>,
  TError,
  { data: CreateServerSessionDto },
  TContext
> => {
  const mutationKey = ["serversessionsControllerCreate"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serversessionsControllerCreate>>,
    { data: CreateServerSessionDto }
  > = (props) => {
    const { data } = props ?? {};

    return serversessionsControllerCreate(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ServersessionsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serversessionsControllerCreate>>
>;
export type ServersessionsControllerCreateMutationBody = CreateServerSessionDto;
export type ServersessionsControllerCreateMutationError = void;

export const useServersessionsControllerCreate = <
  TError = void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serversessionsControllerCreate>>,
      TError,
      { data: CreateServerSessionDto },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof serversessionsControllerCreate>>,
  TError,
  { data: CreateServerSessionDto },
  TContext
> => {
  const mutationOptions =
    getServersessionsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type serversessionsControllerGetListResponse201 = {
  data: CreateServerSessionResponseEntity[];
  status: 201;
};

export type serversessionsControllerGetListResponse401 = {
  data: void;
  status: 401;
};

export type serversessionsControllerGetListResponseComposite =
  | serversessionsControllerGetListResponse201
  | serversessionsControllerGetListResponse401;

export type serversessionsControllerGetListResponse =
  serversessionsControllerGetListResponseComposite & {
    headers: Headers;
  };

export const getServersessionsControllerGetListUrl = () => {
  return `/v1/server-sessions`;
};

export const serversessionsControllerGetList = async (
  options?: RequestInit,
): Promise<serversessionsControllerGetListResponse> => {
  const res = await fetch(getServersessionsControllerGetListUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: serversessionsControllerGetListResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as serversessionsControllerGetListResponse;
};

export const getServersessionsControllerGetListQueryKey = () => {
  return [`/v1/server-sessions`] as const;
};

export const getServersessionsControllerGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof serversessionsControllerGetList>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getServersessionsControllerGetListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serversessionsControllerGetList>>
  > = ({ signal }) =>
    serversessionsControllerGetList({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof serversessionsControllerGetList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ServersessionsControllerGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof serversessionsControllerGetList>>
>;
export type ServersessionsControllerGetListQueryError = void;

export function useServersessionsControllerGetList<
  TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serversessionsControllerGetList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useServersessionsControllerGetList<
  TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serversessionsControllerGetList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serversessionsControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof serversessionsControllerGetList>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useServersessionsControllerGetList<
  TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serversessionsControllerGetList>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useServersessionsControllerGetList<
  TData = Awaited<ReturnType<typeof serversessionsControllerGetList>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serversessionsControllerGetList>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getServersessionsControllerGetListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type serversessionsControllerUpdateServerInfoResponse201 = {
  data: ServerInfoEntity;
  status: 201;
};

export type serversessionsControllerUpdateServerInfoResponse401 = {
  data: void;
  status: 401;
};

export type serversessionsControllerUpdateServerInfoResponseComposite =
  | serversessionsControllerUpdateServerInfoResponse201
  | serversessionsControllerUpdateServerInfoResponse401;

export type serversessionsControllerUpdateServerInfoResponse =
  serversessionsControllerUpdateServerInfoResponseComposite & {
    headers: Headers;
  };

export const getServersessionsControllerUpdateServerInfoUrl = () => {
  return `/v1/server-sessions/update-server-info`;
};

export const serversessionsControllerUpdateServerInfo = async (
  updateServerInfoDto: UpdateServerInfoDto,
  options?: RequestInit,
): Promise<serversessionsControllerUpdateServerInfoResponse> => {
  const res = await fetch(getServersessionsControllerUpdateServerInfoUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateServerInfoDto),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: serversessionsControllerUpdateServerInfoResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as serversessionsControllerUpdateServerInfoResponse;
};

export const getServersessionsControllerUpdateServerInfoMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
    TError,
    { data: UpdateServerInfoDto },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
  TError,
  { data: UpdateServerInfoDto },
  TContext
> => {
  const mutationKey = ["serversessionsControllerUpdateServerInfo"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
    { data: UpdateServerInfoDto }
  > = (props) => {
    const { data } = props ?? {};

    return serversessionsControllerUpdateServerInfo(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ServersessionsControllerUpdateServerInfoMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>
  >;
export type ServersessionsControllerUpdateServerInfoMutationBody =
  UpdateServerInfoDto;
export type ServersessionsControllerUpdateServerInfoMutationError = void;

export const useServersessionsControllerUpdateServerInfo = <
  TError = void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
      TError,
      { data: UpdateServerInfoDto },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof serversessionsControllerUpdateServerInfo>>,
  TError,
  { data: UpdateServerInfoDto },
  TContext
> => {
  const mutationOptions =
    getServersessionsControllerUpdateServerInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Create a new timeline configuration
 */
export type timelineControllerCreateResponse201 = {
  data: TimelineEntity;
  status: 201;
};

export type timelineControllerCreateResponse400 = {
  data: void;
  status: 400;
};

export type timelineControllerCreateResponseComposite =
  | timelineControllerCreateResponse201
  | timelineControllerCreateResponse400;

export type timelineControllerCreateResponse =
  timelineControllerCreateResponseComposite & {
    headers: Headers;
  };

export const getTimelineControllerCreateUrl = () => {
  return `/v1/timeline`;
};

export const timelineControllerCreate = async (
  createTimelineDto: CreateTimelineDto,
  options?: RequestInit,
): Promise<timelineControllerCreateResponse> => {
  const res = await fetch(getTimelineControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createTimelineDto),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: timelineControllerCreateResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as timelineControllerCreateResponse;
};

export const getTimelineControllerCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timelineControllerCreate>>,
    TError,
    { data: CreateTimelineDto },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof timelineControllerCreate>>,
  TError,
  { data: CreateTimelineDto },
  TContext
> => {
  const mutationKey = ["timelineControllerCreate"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timelineControllerCreate>>,
    { data: CreateTimelineDto }
  > = (props) => {
    const { data } = props ?? {};

    return timelineControllerCreate(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TimelineControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof timelineControllerCreate>>
>;
export type TimelineControllerCreateMutationBody = CreateTimelineDto;
export type TimelineControllerCreateMutationError = void;

/**
 * @summary Create a new timeline configuration
 */
export const useTimelineControllerCreate = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof timelineControllerCreate>>,
      TError,
      { data: CreateTimelineDto },
      TContext
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof timelineControllerCreate>>,
  TError,
  { data: CreateTimelineDto },
  TContext
> => {
  const mutationOptions = getTimelineControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get all timeline configurations for the user
 */
export type timelineControllerFindAllResponse200 = {
  data: TimelineWithServerSessionEntity[];
  status: 200;
};

export type timelineControllerFindAllResponse401 = {
  data: void;
  status: 401;
};

export type timelineControllerFindAllResponseComposite =
  | timelineControllerFindAllResponse200
  | timelineControllerFindAllResponse401;

export type timelineControllerFindAllResponse =
  timelineControllerFindAllResponseComposite & {
    headers: Headers;
  };

export const getTimelineControllerFindAllUrl = () => {
  return `/v1/timeline`;
};

export const timelineControllerFindAll = async (
  options?: RequestInit,
): Promise<timelineControllerFindAllResponse> => {
  const res = await fetch(getTimelineControllerFindAllUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: timelineControllerFindAllResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as timelineControllerFindAllResponse;
};

export const getTimelineControllerFindAllQueryKey = () => {
  return [`/v1/timeline`] as const;
};

export const getTimelineControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof timelineControllerFindAll>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof timelineControllerFindAll>>,
      TError,
      TData
    >
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTimelineControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof timelineControllerFindAll>>
  > = ({ signal }) => timelineControllerFindAll({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof timelineControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TimelineControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof timelineControllerFindAll>>
>;
export type TimelineControllerFindAllQueryError = void;

export function useTimelineControllerFindAll<
  TData = Awaited<ReturnType<typeof timelineControllerFindAll>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimelineControllerFindAll<
  TData = Awaited<ReturnType<typeof timelineControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimelineControllerFindAll<
  TData = Awaited<ReturnType<typeof timelineControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindAll>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all timeline configurations for the user
 */

export function useTimelineControllerFindAll<
  TData = Awaited<ReturnType<typeof timelineControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindAll>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTimelineControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetches notes for a timeline associated with the given server session ID. Needs clarification if it should fetch based on Timeline ID instead.
 * @summary Get timeline notes for a specific server session
 */
export type timelineControllerFindOneResponse200 = {
  data: TimelineControllerFindOne200Item[];
  status: 200;
};

export type timelineControllerFindOneResponse401 = {
  data: void;
  status: 401;
};

export type timelineControllerFindOneResponseComposite =
  | timelineControllerFindOneResponse200
  | timelineControllerFindOneResponse401;

export type timelineControllerFindOneResponse =
  timelineControllerFindOneResponseComposite & {
    headers: Headers;
  };

export const getTimelineControllerFindOneUrl = (serverSessionId: string) => {
  return `/v1/timeline/${serverSessionId}`;
};

export const timelineControllerFindOne = async (
  serverSessionId: string,
  options?: RequestInit,
): Promise<timelineControllerFindOneResponse> => {
  const res = await fetch(getTimelineControllerFindOneUrl(serverSessionId), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: timelineControllerFindOneResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as timelineControllerFindOneResponse;
};

export const getTimelineControllerFindOneQueryKey = (
  serverSessionId: string,
) => {
  return [`/v1/timeline/${serverSessionId}`] as const;
};

export const getTimelineControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof timelineControllerFindOne>>,
  TError = void,
>(
  serverSessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindOne>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTimelineControllerFindOneQueryKey(serverSessionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof timelineControllerFindOne>>
  > = ({ signal }) =>
    timelineControllerFindOne(serverSessionId, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!serverSessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof timelineControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TimelineControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof timelineControllerFindOne>>
>;
export type TimelineControllerFindOneQueryError = void;

export function useTimelineControllerFindOne<
  TData = Awaited<ReturnType<typeof timelineControllerFindOne>>,
  TError = void,
>(
  serverSessionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimelineControllerFindOne<
  TData = Awaited<ReturnType<typeof timelineControllerFindOne>>,
  TError = void,
>(
  serverSessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTimelineControllerFindOne<
  TData = Awaited<ReturnType<typeof timelineControllerFindOne>>,
  TError = void,
>(
  serverSessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindOne>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get timeline notes for a specific server session
 */

export function useTimelineControllerFindOne<
  TData = Awaited<ReturnType<typeof timelineControllerFindOne>>,
  TError = void,
>(
  serverSessionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof timelineControllerFindOne>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTimelineControllerFindOneQueryOptions(
    serverSessionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
