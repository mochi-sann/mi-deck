/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateTimelineDto,
  TimelineControllerFindOne200Item,
  TimelineEntity,
  TimelineWithServerSessionEntity
} from '../../models';

import { customFetch } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create a new timeline configuration
 */
export const timelineControllerCreate = (
    createTimelineDto: CreateTimelineDto,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TimelineEntity>(
      {url: `http://localhost:3000/v1/timeline`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTimelineDto, signal
    },
      options);
    }
  


export const getTimelineControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext> => {

const mutationKey = ['timelineControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof timelineControllerCreate>>, {data: CreateTimelineDto}> = (props) => {
          const {data} = props ?? {};

          return  timelineControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TimelineControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof timelineControllerCreate>>>
    export type TimelineControllerCreateMutationBody = CreateTimelineDto
    export type TimelineControllerCreateMutationError = void

    /**
 * @summary Create a new timeline configuration
 */
export const useTimelineControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof timelineControllerCreate>>,
        TError,
        {data: CreateTimelineDto},
        TContext
      > => {

      const mutationOptions = getTimelineControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all timeline configurations for the user
 */
export const timelineControllerFindAll = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TimelineWithServerSessionEntity[]>(
      {url: `http://localhost:3000/v1/timeline`, method: 'GET', signal
    },
      options);
    }
  

export const getTimelineControllerFindAllQueryKey = () => {
    return [`http://localhost:3000/v1/timeline`] as const;
    }

    
export const getTimelineControllerFindAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindAll>>>, TError = void>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindAll>>> = ({ signal }) => timelineControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindAll>>>
export type TimelineControllerFindAllInfiniteQueryError = void


export function useTimelineControllerFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindAll>>>, TError = void>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindAll>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindAll>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all timeline configurations for the user
 */

export function useTimelineControllerFindAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindAll>>>, TError = void>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTimelineControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindAll>>> = ({ signal }) => timelineControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindAll>>>
export type TimelineControllerFindAllQueryError = void


export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all timeline configurations for the user
 */

export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Fetches notes for a timeline associated with the given server session ID. Needs clarification if it should fetch based on Timeline ID instead.
 * @summary Get timeline notes for a specific server session
 */
export const timelineControllerFindOne = (
    serverSessionId: string,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<TimelineControllerFindOne200Item[]>(
      {url: `http://localhost:3000/v1/timeline/${serverSessionId}`, method: 'GET', signal
    },
      options);
    }
  

export const getTimelineControllerFindOneQueryKey = (serverSessionId: string,) => {
    return [`http://localhost:3000/v1/timeline/${serverSessionId}`] as const;
    }

    
export const getTimelineControllerFindOneInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindOne>>>, TError = void>(serverSessionId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindOneQueryKey(serverSessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindOne>>> = ({ signal }) => timelineControllerFindOne(serverSessionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serverSessionId),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindOneInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindOne>>>
export type TimelineControllerFindOneInfiniteQueryError = void


export function useTimelineControllerFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindOne>>>, TError = void>(
 serverSessionId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindOne>>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindOne>>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get timeline notes for a specific server session
 */

export function useTimelineControllerFindOneInfinite<TData = InfiniteData<Awaited<ReturnType<typeof timelineControllerFindOne>>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindOneInfiniteQueryOptions(serverSessionId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTimelineControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindOneQueryKey(serverSessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindOne>>> = ({ signal }) => timelineControllerFindOne(serverSessionId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serverSessionId),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindOne>>>
export type TimelineControllerFindOneQueryError = void


export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get timeline notes for a specific server session
 */

export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindOneQueryOptions(serverSessionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



