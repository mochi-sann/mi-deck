/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateTimelineDto,
  TimelineControllerFindOne200Item,
  TimelineEntity,
  TimelineWithServerSessionEntity
} from '../../models';





/**
 * @summary Create a new timeline configuration
 */
export type timelineControllerCreateResponse201 = {
  data: TimelineEntity
  status: 201
}

export type timelineControllerCreateResponse400 = {
  data: void
  status: 400
}
    
export type timelineControllerCreateResponseComposite = timelineControllerCreateResponse201 | timelineControllerCreateResponse400;
    
export type timelineControllerCreateResponse = timelineControllerCreateResponseComposite & {
  headers: Headers;
}

export const getTimelineControllerCreateUrl = () => {


  

  return `/v1/timeline`
}

export const timelineControllerCreate = async (createTimelineDto: CreateTimelineDto, options?: RequestInit): Promise<timelineControllerCreateResponse> => {
  
  const res = await fetch(getTimelineControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTimelineDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: timelineControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as timelineControllerCreateResponse
}




export const getTimelineControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext> => {

const mutationKey = ['timelineControllerCreate'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof timelineControllerCreate>>, {data: CreateTimelineDto}> = (props) => {
          const {data} = props ?? {};

          return  timelineControllerCreate(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TimelineControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof timelineControllerCreate>>>
    export type TimelineControllerCreateMutationBody = CreateTimelineDto
    export type TimelineControllerCreateMutationError = void

    /**
 * @summary Create a new timeline configuration
 */
export const useTimelineControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof timelineControllerCreate>>, TError,{data: CreateTimelineDto}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof timelineControllerCreate>>,
        TError,
        {data: CreateTimelineDto},
        TContext
      > => {

      const mutationOptions = getTimelineControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all timeline configurations for the user
 */
export type timelineControllerFindAllResponse200 = {
  data: TimelineWithServerSessionEntity[]
  status: 200
}

export type timelineControllerFindAllResponse401 = {
  data: void
  status: 401
}
    
export type timelineControllerFindAllResponseComposite = timelineControllerFindAllResponse200 | timelineControllerFindAllResponse401;
    
export type timelineControllerFindAllResponse = timelineControllerFindAllResponseComposite & {
  headers: Headers;
}

export const getTimelineControllerFindAllUrl = () => {


  

  return `/v1/timeline`
}

export const timelineControllerFindAll = async ( options?: RequestInit): Promise<timelineControllerFindAllResponse> => {
  
  const res = await fetch(getTimelineControllerFindAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: timelineControllerFindAllResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as timelineControllerFindAllResponse
}



export const getTimelineControllerFindAllQueryKey = () => {
    return [`/v1/timeline`] as const;
    }

    
export const getTimelineControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindAll>>> = ({ signal }) => timelineControllerFindAll({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindAll>>>
export type TimelineControllerFindAllQueryError = void


export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindAll>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all timeline configurations for the user
 */

export function useTimelineControllerFindAll<TData = Awaited<ReturnType<typeof timelineControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindAll>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Fetches notes for a timeline associated with the given server session ID. Needs clarification if it should fetch based on Timeline ID instead.
 * @summary Get timeline notes for a specific server session
 */
export type timelineControllerFindOneResponse200 = {
  data: TimelineControllerFindOne200Item[]
  status: 200
}

export type timelineControllerFindOneResponse401 = {
  data: void
  status: 401
}
    
export type timelineControllerFindOneResponseComposite = timelineControllerFindOneResponse200 | timelineControllerFindOneResponse401;
    
export type timelineControllerFindOneResponse = timelineControllerFindOneResponseComposite & {
  headers: Headers;
}

export const getTimelineControllerFindOneUrl = (serverSessionId: string,) => {


  

  return `/v1/timeline/${serverSessionId}`
}

export const timelineControllerFindOne = async (serverSessionId: string, options?: RequestInit): Promise<timelineControllerFindOneResponse> => {
  
  const res = await fetch(getTimelineControllerFindOneUrl(serverSessionId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: timelineControllerFindOneResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as timelineControllerFindOneResponse
}



export const getTimelineControllerFindOneQueryKey = (serverSessionId: string,) => {
    return [`/v1/timeline/${serverSessionId}`] as const;
    }

    
export const getTimelineControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTimelineControllerFindOneQueryKey(serverSessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof timelineControllerFindOne>>> = ({ signal }) => timelineControllerFindOne(serverSessionId, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(serverSessionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TimelineControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof timelineControllerFindOne>>>
export type TimelineControllerFindOneQueryError = void


export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof timelineControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof timelineControllerFindOne>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get timeline notes for a specific server session
 */

export function useTimelineControllerFindOne<TData = Awaited<ReturnType<typeof timelineControllerFindOne>>, TError = void>(
 serverSessionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof timelineControllerFindOne>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTimelineControllerFindOneQueryOptions(serverSessionId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



