/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * mi-deck api
 * mi-deck api description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  TimelineControllerFindOne200Item,
  TimelineEntity,
  TimelineWithServerSessionEntity
} from '../../models';


export const getTimelineControllerCreateResponseMock = (overrideResponse: Partial< TimelineEntity > = {}): TimelineEntity => ({id: faker.string.uuid(), serverSessionId: faker.string.uuid(), name: faker.string.alpha(20), type: faker.helpers.arrayElement(['HOME','LOCAL','GLOBAL','LIST','USER','CHANNEL'] as const), listId: faker.helpers.arrayElement([{}, undefined]), channelId: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getTimelineControllerFindAllResponseMock = (): TimelineWithServerSessionEntity[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), serverSessionId: faker.string.uuid(), name: faker.string.alpha(20), type: faker.helpers.arrayElement(['HOME','LOCAL','GLOBAL','LIST','USER','CHANNEL'] as const), listId: faker.helpers.arrayElement([{}, undefined]), channelId: faker.helpers.arrayElement([{}, undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, serverSession: {...{id: faker.string.uuid(), origin: faker.string.alpha(20), serverType: faker.helpers.arrayElement(['Misskey','OtherServer'] as const), serverToken: faker.string.alpha(20)},}})))

export const getTimelineControllerFindOneResponseMock = (): TimelineControllerFindOne200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})))


export const getTimelineControllerCreateMockHandler = (overrideResponse?: TimelineEntity | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimelineEntity> | TimelineEntity)) => {
  return http.post('*/v1/timeline', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimelineControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimelineControllerFindAllMockHandler = (overrideResponse?: TimelineWithServerSessionEntity[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimelineWithServerSessionEntity[]> | TimelineWithServerSessionEntity[])) => {
  return http.get('*/v1/timeline', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimelineControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimelineControllerFindOneMockHandler = (overrideResponse?: TimelineControllerFindOne200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimelineControllerFindOne200Item[]> | TimelineControllerFindOne200Item[])) => {
  return http.get('*/v1/timeline/:serverSessionId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimelineControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTimelineMock = () => [
  getTimelineControllerCreateMockHandler(),
  getTimelineControllerFindAllMockHandler(),
  getTimelineControllerFindOneMockHandler()
]
