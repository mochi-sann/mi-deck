/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/signUp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/server-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServersessionsController_getList"];
        put?: never;
        post: operations["ServersessionsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/server-sessions/update-server-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ServersessionsController_updateServerInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all timeline configurations for the user */
        get: operations["TimelineController_findAll"];
        put?: never;
        /** Create a new timeline configuration */
        post: operations["TimelineController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/timeline/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the order of timelines */
        patch: operations["TimelineController_updateOrder"];
        trace?: never;
    };
    "/v1/timeline/{serverSessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get timeline notes for a specific server session
         * @description Fetches notes for a timeline associated with the given server session ID. Needs clarification if it should fetch based on Timeline ID instead.
         */
        get: operations["TimelineController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDto: {
            /** @example example@example.com */
            email: string;
            /** @example password */
            password: string;
        };
        LoginEntity: {
            accessToken: string;
        };
        SignUpDto: {
            /** @example example@example.com */
            email: string;
            /** @example password */
            password: string;
            /** @example username */
            username: string;
        };
        MeEntity: {
            id: string;
            email: string;
            name: string;
        };
        CreateServerSessionDto: {
            /** @example https://example.com */
            origin: string;
            sessionToken: string;
            serverType: string;
        };
        CreateServerSessionResponseEntity: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            origin: string;
            serverToken: string;
            /** @enum {string} */
            serverType: "Misskey" | "OtherServer";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateServerInfoDto: {
            /** @example https://example.com */
            origin: string;
        };
        ServerInfoEntity: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            name: string;
            /** Format: uuid */
            serverSessionId: string;
            iconUrl: string;
            faviconUrl: string;
            themeColor: string;
        };
        CreateTimelineDto: {
            /**
             * @description The ID of the server session this timeline belongs to
             * @example a1b2c3d4-e5f6-7890-1234-567890abcdef
             */
            serverSessionId: string;
            /**
             * @description User-defined name for the timeline
             * @example My Home Timeline
             */
            name: string;
            /**
             * @description Type of the timeline
             * @example HOME
             * @enum {string}
             */
            type: "HOME" | "LOCAL" | "GLOBAL" | "LIST" | "USER" | "CHANNEL";
            /**
             * @description Required if type is LIST. The ID of the Misskey list.
             * @example abcdef1234567890
             */
            listId?: string;
            /**
             * @description Required if type is CHANNEL. The ID of the Misskey channel.
             * @example ghijkl9876543210
             */
            channelId?: string;
        };
        TimelineEntity: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            serverSessionId: string;
            name: string;
            /** @enum {string} */
            type: "HOME" | "LOCAL" | "GLOBAL" | "LIST" | "USER" | "CHANNEL";
            listId?: Record<string, never>;
            channelId?: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ServerSessionInfo: {
            /**
             * Format: uuid
             * @description ID of the server session
             */
            id: string;
            /**
             * @description Origin URL of the server
             * @example https://misskey.io
             */
            origin: string;
            /**
             * @description Type of the server
             * @enum {string}
             */
            serverType: "Misskey" | "OtherServer";
            /** @description Token for the server session */
            serverToken: string;
        };
        TimelineWithServerSessionEntity: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            serverSessionId: string;
            name: string;
            /** @enum {string} */
            type: "HOME" | "LOCAL" | "GLOBAL" | "LIST" | "USER" | "CHANNEL";
            listId?: Record<string, never>;
            channelId?: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** @description Associated server session details */
            serverSession: components["schemas"]["ServerSessionInfo"];
        };
        UpdateTimelineOrderDto: {
            /** @description An array of timeline IDs in the desired order */
            timelineIds: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginEntity"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginEntity"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description メールアドレスがコンフリクト */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeEntity"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServersessionsController_getList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServerSessionResponseEntity"][];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServersessionsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServerSessionDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServerSessionResponseEntity"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServersessionsController_updateServerInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServerInfoDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerInfoEntity"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TimelineController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of timeline configurations. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimelineWithServerSessionEntity"][];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TimelineController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTimelineDto"];
            };
        };
        responses: {
            /** @description Timeline configuration created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimelineEntity"];
                };
            };
            /** @description Bad Request (validation failed). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden (user does not own the server session). */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TimelineController_updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTimelineOrderDto"];
            };
        };
        responses: {
            /** @description Timeline order updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request (validation failed). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TimelineController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serverSessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of notes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden (session not found or access denied). */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
