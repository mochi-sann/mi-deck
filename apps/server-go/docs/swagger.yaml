basePath: /
definitions:
  auth.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  auth.LoginEntity:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.MeEntity:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: John Doe
        type: string
    type: object
  auth.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.CreateServerSessionRequest:
    properties:
      origin:
        type: string
      serverType:
        enum:
        - Misskey
        - OtherServer
        type: string
    required:
    - origin
    - serverType
    type: object
  controllers.UpdateServerInfoRequest:
    properties:
      faviconUrl:
        type: string
      iconUrl:
        type: string
      name:
        type: string
      themeColor:
        type: string
    type: object
  models.Panel:
    properties:
      id:
        type: string
      serverSession:
        $ref: '#/definitions/models.ServerSession'
      serverSessionID:
        type: string
      type:
        type: string
    type: object
  models.ServerInfo:
    properties:
      createdAt:
        type: string
      faviconUrl:
        type: string
      iconUrl:
        type: string
      id:
        type: string
      name:
        type: string
      serverSession:
        $ref: '#/definitions/models.ServerSession'
      serverSessionID:
        type: string
      themeColor:
        type: string
      updatedAt:
        type: string
    type: object
  models.ServerSession:
    properties:
      createdAt:
        type: string
      id:
        type: string
      origin:
        type: string
      panels:
        items:
          $ref: '#/definitions/models.Panel'
        type: array
      serverInfo:
        $ref: '#/definitions/models.ServerInfo'
      serverToken:
        type: string
      serverType:
        $ref: '#/definitions/models.ServerType'
      serverUserInfo:
        $ref: '#/definitions/models.UserInfo'
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
    type: object
  models.ServerType:
    enum:
    - Misskey
    - OtherServer
    type: string
    x-enum-varnames:
    - ServerTypeMisskey
    - ServerTypeOtherServer
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      serverSession:
        items:
          $ref: '#/definitions/models.ServerSession'
        type: array
      updatedAt:
        type: string
      userInfo:
        items:
          $ref: '#/definitions/models.UserInfo'
        type: array
      userRole:
        $ref: '#/definitions/models.UserRole'
      userSettings:
        items:
          $ref: '#/definitions/models.UserSetting'
        type: array
    type: object
  models.UserInfo:
    properties:
      avatarUrl:
        type: string
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      serverSession:
        $ref: '#/definitions/models.ServerSession'
      serverSessionID:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
      username:
        type: string
    type: object
  models.UserRole:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
  models.UserSetting:
    properties:
      createdAt:
        type: string
      id:
        type: string
      key:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
      value:
        type: string
    type: object
  routes.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: This is a sample server for the application.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Server API
  version: "1.0"
paths:
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with name, email and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - users
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get access token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns access token
          schema:
            $ref: '#/definitions/auth.LoginEntity'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User login
      tags:
      - auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate current session (client should discard token)
      produces:
      - application/json
      responses:
        "204":
          description: No content
      security:
      - Bearer: []
      summary: Logout current user
      tags:
      - auth
  /v1/auth/me:
    get:
      consumes:
      - application/json
      description: Get details of currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Returns user details
          schema:
            $ref: '#/definitions/auth.MeEntity'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - Bearer: []
      summary: Get current user profile
      tags:
      - auth
  /v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Create new user account and get access token
      parameters:
      - description: Sign up details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Returns access token
          schema:
            $ref: '#/definitions/auth.LoginEntity'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /v1/server-sessions:
    get:
      consumes:
      - application/json
      description: Get all server sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ServerSession'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List server sessions
      tags:
      - ServerSessions
    post:
      consumes:
      - application/json
      description: Create a new server session for the authenticated user
      parameters:
      - description: Server session data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateServerSessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ServerSession'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a server session
      tags:
      - ServerSessions
  /v1/server-sessions/{id}/info:
    put:
      consumes:
      - application/json
      description: Update server information for a session
      parameters:
      - description: Server Session ID
        in: path
        name: id
        required: true
        type: string
      - description: Server info data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateServerInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServerInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update server info
      tags:
      - ServerSessions
schemes:
- http
swagger: "2.0"
