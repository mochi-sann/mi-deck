generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "prisma schema"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  decks    Deck[]
  columns  Column[]
}

// Misskeyアカウント
model Account {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String
  token      String
  username   String // Misskeyでのユーザー名
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, instanceId])
}

// インスタンス (サーバー)
model Instance {
  id        String   @id @default(cuid())
  host      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  columns  Column[]
}

// カラム
model Column {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  deck       Deck       @relation(fields: [deckId], references: [id])
  deckId     String
  instance   Instance   @relation(fields: [instanceId], references: [id])
  instanceId String
  title      String
  type       ColumnType
  params     Json?
  order      Int
  width      Int?       @default(300)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  deckColumn DeckColumn[]
}

// カラムの種類
enum ColumnType {
  HOME
  LOCAL_TIMELINE
  SOCIAL_TIMELINE
  GLOBAL_TIMELINE
  NOTIFICATIONS
  DIRECT_MESSAGES
  LIST
  SEARCH
  HASHTAG
  USER
  ANTENNA
  CHANNEL
  CLIP
  GALLERY
  PAGE
}

// デッキ
model Deck {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  name       String
  order      Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  columns    Column[]
  deckColumn DeckColumn[]
}

// デッキとカラムを紐付ける中間テーブル
model DeckColumn {
  id       String @id @default(cuid())
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId   String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String

  @@unique([deckId, columnId])
}

// 投稿 (Note) - キャッシュ用
model CachedNote {
  id         String    @id // Misskeyの投稿ID
  userId     String // 投稿者のユーザーID
  text       String? // 投稿のテキスト
  cw         String? // CWの内容
  createdAt  DateTime // 投稿日時
  updatedAt  DateTime?
  replyId    String?
  renoteId   String?
  visibility String?
  emojis     Json?
  fileIds    Json?
  files      Json?
  tags       Json?
  poll       Json?
  user       Json? // 投稿者のユーザー情報(アイコンのURLなど最低限の物)
  instance   String? // 投稿元インスタンス
}
