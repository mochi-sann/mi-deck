// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "prisma schema"
}
generator dbml {
  provider = "prisma-dbml-generator"
}
enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  serverSession ServerSession[]
  userSettings  UserSetting[]
  userRole      UserRole        @default(USER) @map("user_role")
  userInfo      UserInfo[]

  @@map("user")
}

model UserSetting {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  key       String
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("user_setting")
}

enum ServerType {
  Misskey
  OtherServer // 将来のサーバータイプを追加
}

model ServerSession {
  id             String      @id @default(uuid())
  userId         String      @map("user_id")
  user           User        @relation(fields: [userId], references: [id])
  origin         String // 修正されたフィールド名
  serverToken    String      @map("server_token")
  serverType     ServerType  @map("server_type")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  panels         Panel[]
  serverInfo     ServerInfo?
  serverUserInfo UserInfo?

  @@index([userId])
  @@map("server_session")
}

model ServerInfo {
  id              String        @id @default(uuid())
  serverSessionId String        @unique @map("server_session_id")
  serverSession   ServerSession @relation(fields: [serverSessionId], references: [id])
  name            String
  softwareName    String        @map("software_name")
  softwareVersion String        @map("software_version")
  iconUrl         String        @map("icon_url")
  faviconUrl      String        @map("favicon_url")
  themeColor      String        @map("theme_color")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@index([serverSessionId])
  @@map("server_info")
}

model UserInfo {
  id              String        @id @default(uuid())
  name            String
  username        String
  avatarUrl       String        @map("avater_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  serverSession   ServerSession @relation(fields: [serverSEssionId], references: [id])
  serverSEssionId String        @unique @map("server_s_ession_id")
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?

  @@index([serverSEssionId])
  @@map("user_info")
}

model Panel {
  id              String        @id @default(uuid())
  serverSessionId String        @map("server_session_id")
  serverSession   ServerSession @relation(fields: [serverSessionId], references: [id])
  type            String

  @@index([serverSessionId])
  @@map("panel")
}
