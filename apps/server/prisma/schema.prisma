// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client" // no `-js` at the end
  output       = "../src/generated/prisma" // `output` is required
  moduleFormat = "esm" // or `"cjs"` for CommonJS
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "prisma schema"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  ADMIN
  USER
}

generator kysely {
  provider     = "prisma-kysely"
  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../kysely"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  serverSession ServerSession[]
  userSettings  UserSetting[]
  userRole      UserRole        @default(USER)
  userInfo      UserInfo[]
}

model UserSetting {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum ServerType {
  Misskey
  OtherServer // 将来のサーバータイプを追加
}

model ServerSession {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  origin         String // 修正されたフィールド名
  serverToken    String
  serverType     ServerType
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  panels         Panel[]
  serverInfo     ServerInfo?
  serverUserInfo UserInfo?
  timeline       Timeline[]

  @@unique([origin, userId])
  @@index([userId])
}

model ServerInfo {
  id              String        @id @default(uuid())
  serverSessionId String        @unique
  serverSession   ServerSession @relation(fields: [serverSessionId], references: [id])
  name            String
  // softwareName    String?        @map("software_name")
  // softwareVersion String?        @map("software_version")
  iconUrl         String
  faviconUrl      String
  themeColor      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([serverSessionId])
}

model UserInfo {
  id              String        @id @default(uuid())
  name            String
  username        String
  avatarUrl       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  serverSession   ServerSession @relation(fields: [serverSEssionId], references: [id])
  serverSEssionId String        @unique
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?

  @@index([serverSEssionId])
}

model Panel {
  id              String        @id @default(uuid())
  serverSessionId String
  serverSession   ServerSession @relation(fields: [serverSessionId], references: [id])
  type            String

  @@index([serverSessionId])
}

enum TimelineType {
  HOME
  LOCAL
  GLOBAL
  LIST
  USER
  CHANNEL // Misskeyのチャンネル用
}

model Timeline {
  id              String        @id @default(uuid())
  serverSessionId String
  serverSession   ServerSession @relation(fields: [serverSessionId], references: [id], onDelete: Cascade) // onDeleteを追加してセッション削除時にタイムラインも削除
  name            String
  type            TimelineType
  listId          String? // LISTタイプの場合に使用
  channelId       String? // CHANNELタイプの場合に使用
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([serverSessionId])
}
