generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "prisma schema"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid()) @map("Id")
  username  String   @unique @map("Username")
  password  String   @map("Password")
  createdAt DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  accounts    Account[]
  decks       Deck[]
  columns     Column[]
  UserSetting UserSetting[]
}

// Misskeyアカウント
model Account {
  id         String   @id @default(cuid()) @map("Id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("UserId")
  instance   Instance @relation(fields: [instanceId], references: [id])
  instanceId String   @map("InstanceId")
  token      String   @map("Token")
  username   String   @map("Username") // Misskeyでのユーザー名
  createdAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt  DateTime @updatedAt @map("UpdatedAt")

  @@unique([userId, instanceId])
}

// インスタンス (サーバー)
model Instance {
  id        String   @id @default(cuid()) @map("Id")
  host      String   @unique @map("Host")
  createdAt DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  accounts Account[]
  columns  Column[]
}

// カラム
model Column {
  id         String     @id @default(cuid()) @map("Id")
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @map("UserId")
  deck       Deck       @relation(fields: [deckId], references: [id])
  deckId     String     @map("DeckId")
  instance   Instance   @relation(fields: [instanceId], references: [id])
  instanceId String     @map("InstanceId")
  title      String     @map("Title")
  type       ColumnType @map("Type")
  params     Json?      @map("Params")
  order      Int        @map("Order")
  width      Int?       @default(300) @map("Width")
  createdAt  DateTime   @default(now()) @map("CreatedAt")
  updatedAt  DateTime   @updatedAt @map("UpdatedAt")

  deckColumn DeckColumn[]
}

// カラムの種類
enum ColumnType {
  HOME
  LOCAL_TIMELINE
  SOCIAL_TIMELINE
  GLOBAL_TIMELINE
  NOTIFICATIONS
  DIRECT_MESSAGES
  LIST
  SEARCH
  HASHTAG
  USER
  ANTENNA
  CHANNEL
  CLIP
  GALLERY
  PAGE
}

// デッキ
model Deck {
  id         String       @id @default(cuid()) @map("Id")
  user       User         @relation(fields: [userId], references: [id])
  userId     String       @map("UserId")
  name       String       @map("Name")
  order      Int          @map("Order")
  createdAt  DateTime     @default(now()) @map("CreatedAt")
  updatedAt  DateTime     @updatedAt @map("UpdatedAt")
  columns    Column[]
  deckColumn DeckColumn[]
}

// デッキとカラムを紐付ける中間テーブル
model DeckColumn {
  id       String @id @default(cuid()) @map("Id")
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId   String @map("DeckId")
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String @map("ColumnId")

  @@unique([deckId, columnId])
}

// 投稿 (Note) - キャッシュ用
model CachedNote {
  id         String    @id @map("Id") // Misskeyの投稿ID
  userId     String    @map("UserId") // 投稿者のユーザーID
  text       String?   @map("Text") // 投稿のテキスト
  cw         String?   @map("Cw") // CWの内容
  createdAt  DateTime  @map("CreatedAt") // 投稿日時
  updatedAt  DateTime? @map("UpdatedAt")
  replyId    String?   @map("ReplyId")
  renoteId   String?   @map("RenoteId")
  visibility String?   @map("Visibility")
  emojis     Json?     @map("Emojis")
  fileIds    Json?     @map("FileIds")
  files      Json?     @map("Files")
  tags       Json?     @map("Tags")
  poll       Json?     @map("Poll")
  user       Json?     @map("User") // 投稿者のユーザー情報(アイコンのURLなど最低限の物)
  instance   String?   @map("Instance") // 投稿元インスタンス
}

model UserSetting {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  theme     String?  @default("default")
  locale    String?  @default("jp")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
