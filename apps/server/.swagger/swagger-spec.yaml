openapi: 3.0.0
paths:
  /v1:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /v1/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginEntity'
        '401':
          description: ''
      tags: &ref_0
        - auth
  /v1/auth/signUp:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginEntity'
        '401':
          description: ''
        '409':
          description: メールアドレスがコンフリクト
      tags: *ref_0
  /v1/auth/me:
    get:
      operationId: AuthController_getProfile
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeEntity'
        '401':
          description: ''
      security:
        - bearer: []
      tags: *ref_0
  /v1/auth/logout:
    post:
      operationId: AuthController_logout
      parameters: []
      responses:
        '201':
          description: ''
      tags: *ref_0
  /v1/server-sessions:
    post:
      operationId: ServersessionsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerSessionDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServerSessionResponseEntity'
        '401':
          description: ''
      security:
        - bearer: []
      tags: &ref_1
        - server-sessions
    get:
      operationId: ServersessionsController_getList
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateServerSessionResponseEntity'
        '401':
          description: ''
      security:
        - bearer: []
      tags: *ref_1
  /v1/server-sessions/update-server-info:
    post:
      operationId: ServersessionsController_updateServerInfo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServerInfoDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoEntity'
        '401':
          description: ''
      security:
        - bearer: []
      tags: *ref_1
  /v1/timeline:
    post:
      operationId: TimelineController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimelineDto'
      responses:
        '201':
          description: Timeline configuration created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineEntity'
        '400':
          description: Bad Request (validation failed).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (user does not own the server session).
      security:
        - bearer: []
      summary: Create a new timeline configuration
      tags: &ref_2
        - timeline
    get:
      operationId: TimelineController_findAll
      parameters: []
      responses:
        '200':
          description: Returns an array of timeline configurations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimelineWithServerSessionEntity'
        '401':
          description: Unauthorized.
      security:
        - bearer: []
      summary: Get all timeline configurations for the user
      tags: *ref_2
  /v1/timeline/order:
    patch:
      operationId: TimelineController_updateOrder
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimelineOrderDto'
      responses:
        '200':
          description: Timeline order updated successfully.
        '400':
          description: Bad Request (validation failed or empty array).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (timeline not owned by user).
      security:
        - bearer: []
      summary: Update the order of timelines
      tags: *ref_2
  /v1/timeline/{timelineId}:
    delete:
      operationId: TimelineController_deleteTimeline
      parameters:
        - name: timelineId
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Timeline configuration deleted successfully.
        '400':
          description: Bad Request (invalid UUID format).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (timeline not found or access denied).
        '404':
          description: Timeline not found.
      security:
        - bearer: []
      summary: Delete a timeline configuration
      tags: *ref_2
  /v1/timeline/{serverSessionId}:
    get:
      description: >-
        Fetches notes for a timeline associated with the given server session
        ID. Needs clarification if it should fetch based on Timeline ID instead.
      operationId: TimelineController_findOne
      parameters:
        - name: serverSessionId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns an array of notes.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (session not found or access denied).
      security:
        - bearer: []
      summary: Get timeline notes for a specific server session
      tags: *ref_2
info:
  title: mi-deck api
  description: mi-deck api description
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    LoginDto:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          example: password
      required:
        - email
        - password
    LoginEntity:
      type: object
      properties:
        accessToken:
          type: string
      required:
        - accessToken
    SignUpDto:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          example: password
        username:
          type: string
          example: username
      required:
        - email
        - password
        - username
    MeEntity:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
      required:
        - id
        - email
        - name
    CreateServerSessionDto:
      type: object
      properties:
        origin:
          type: string
          example: https://misskey.io
        serverType:
          type: string
          example: Misskey
        sessionToken:
          type: string
      required:
        - origin
        - serverType
        - sessionToken
    ServerInfoEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        iconUrl:
          type: string
          format: url
        faviconUrl:
          type: string
          format: url
        themeColor:
          type: string
      required:
        - id
    ServerUserInfoEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        avatarUrl:
          type: string
          format: url
      required:
        - id
        - username
    CreateServerSessionResponseEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        origin:
          type: string
        serverToken:
          type: string
        serverType:
          type: string
          enum:
            - Misskey
            - OtherServer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        serverInfo:
          $ref: '#/components/schemas/ServerInfoEntity'
        serverUserInfo:
          $ref: '#/components/schemas/ServerUserInfoEntity'
      required:
        - id
        - userId
        - origin
        - serverToken
        - serverType
        - createdAt
        - updatedAt
    UpdateServerInfoDto:
      type: object
      properties:
        origin:
          type: string
          example: https://example.com
        name:
          type: string
          example: My Server
        iconUrl:
          type: string
          example: https://example.com/icon.png
        faviconUrl:
          type: string
          example: https://example.com/favicon.png
        themeColor:
          type: string
          example: '#ffffff'
      required:
        - origin
    CreateTimelineDto:
      type: object
      properties:
        serverSessionId:
          type: string
          description: The ID of the server session this timeline belongs to
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        name:
          type: string
          description: User-defined name for the timeline
          example: My Home Timeline
        type:
          type: string
          description: Type of the timeline
          enum:
            - HOME
            - LOCAL
            - GLOBAL
            - LIST
            - USER
            - CHANNEL
          example: HOME
        listId:
          type: string
          description: Required if type is LIST. The ID of the Misskey list.
          example: abcdef1234567890
        channelId:
          type: string
          description: Required if type is CHANNEL. The ID of the Misskey channel.
          example: ghijkl9876543210
      required:
        - serverSessionId
        - name
        - type
    TimelineEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serverSessionId:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: &ref_3
            - HOME
            - LOCAL
            - GLOBAL
            - LIST
            - USER
            - CHANNEL
        listId:
          type: object
        channelId:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        order:
          type: number
      required:
        - id
        - serverSessionId
        - name
        - type
        - createdAt
        - updatedAt
        - order
    ServerSessionInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the server session
        origin:
          type: string
          example: https://misskey.io
          description: Origin URL of the server
        serverType:
          type: string
          enum:
            - Misskey
            - OtherServer
          description: Type of the server
        serverToken:
          type: string
          description: Token for the server session
      required:
        - id
        - origin
        - serverType
        - serverToken
    TimelineWithServerSessionEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serverSessionId:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: *ref_3
        listId:
          type: object
        channelId:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        order:
          type: number
        serverSession:
          description: Associated server session details
          allOf:
            - $ref: '#/components/schemas/ServerSessionInfo'
      required:
        - id
        - serverSessionId
        - name
        - type
        - createdAt
        - updatedAt
        - order
        - serverSession
    UpdateTimelineOrderDto:
      type: object
      properties:
        timelineIds:
          description: An array of timeline IDs in the desired order
          example:
            - 123e4567-e89b-12d3-a456-426614174000
            - 456e7890-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - timelineIds
