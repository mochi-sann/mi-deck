/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthedImport } from "./routes/_authed";
import { Route as AuthedAddServerFallbackOriginRouteImport } from "./routes/_authed/add-server/fallback/$origin/route";
import { Route as AuthRouteImport } from "./routes/auth/route";
import { Route as LoginRouteImport } from "./routes/login/route";
import { Route as SignupRouteImport } from "./routes/signup/route";

// Create Virtual Routes

const AuthedIndexLazyImport = createFileRoute("/_authed/")();
const AuthedAboutLazyImport = createFileRoute("/_authed/about")();
const AuthedCreateTimelineRouteLazyImport = createFileRoute(
  "/_authed/create-timeline",
)();
const AuthedAddServerIndexLazyImport = createFileRoute(
  "/_authed/add-server/",
)();

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: "/_authed",
  getParentRoute: () => rootRoute,
} as any);

const SignupRouteRoute = SignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/signup/route.lazy").then((d) => d.Route));

const LoginRouteRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/login/route.lazy").then((d) => d.Route));

const AuthRouteRoute = AuthRouteImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/auth/route.lazy").then((d) => d.Route));

const AuthedIndexLazyRoute = AuthedIndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthedRoute,
} as any).lazy(() =>
  import("./routes/_authed/index.lazy").then((d) => d.Route),
);

const AuthedAboutLazyRoute = AuthedAboutLazyImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => AuthedRoute,
} as any).lazy(() =>
  import("./routes/_authed/about.lazy").then((d) => d.Route),
);

const AuthedCreateTimelineRouteLazyRoute =
  AuthedCreateTimelineRouteLazyImport.update({
    id: "/create-timeline",
    path: "/create-timeline",
    getParentRoute: () => AuthedRoute,
  } as any).lazy(() =>
    import("./routes/_authed/create-timeline/route.lazy").then((d) => d.Route),
  );

const AuthedAddServerIndexLazyRoute = AuthedAddServerIndexLazyImport.update({
  id: "/add-server/",
  path: "/add-server/",
  getParentRoute: () => AuthedRoute,
} as any).lazy(() =>
  import("./routes/_authed/add-server/index.lazy").then((d) => d.Route),
);

const AuthedAddServerFallbackOriginRouteRoute =
  AuthedAddServerFallbackOriginRouteImport.update({
    id: "/add-server/fallback/$origin",
    path: "/add-server/fallback/$origin",
    getParentRoute: () => AuthedRoute,
  } as any).lazy(() =>
    import("./routes/_authed/add-server/fallback/$origin/route.lazy").then(
      (d) => d.Route,
    ),
  );

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_authed": {
      id: "/_authed";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthedImport;
      parentRoute: typeof rootRoute;
    };
    "/_authed/create-timeline": {
      id: "/_authed/create-timeline";
      path: "/create-timeline";
      fullPath: "/create-timeline";
      preLoaderRoute: typeof AuthedCreateTimelineRouteLazyImport;
      parentRoute: typeof AuthedImport;
    };
    "/_authed/about": {
      id: "/_authed/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AuthedAboutLazyImport;
      parentRoute: typeof AuthedImport;
    };
    "/_authed/": {
      id: "/_authed/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthedIndexLazyImport;
      parentRoute: typeof AuthedImport;
    };
    "/_authed/add-server/": {
      id: "/_authed/add-server/";
      path: "/add-server";
      fullPath: "/add-server";
      preLoaderRoute: typeof AuthedAddServerIndexLazyImport;
      parentRoute: typeof AuthedImport;
    };
    "/_authed/add-server/fallback/$origin": {
      id: "/_authed/add-server/fallback/$origin";
      path: "/add-server/fallback/$origin";
      fullPath: "/add-server/fallback/$origin";
      preLoaderRoute: typeof AuthedAddServerFallbackOriginRouteImport;
      parentRoute: typeof AuthedImport;
    };
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedCreateTimelineRouteLazyRoute: typeof AuthedCreateTimelineRouteLazyRoute;
  AuthedAboutLazyRoute: typeof AuthedAboutLazyRoute;
  AuthedIndexLazyRoute: typeof AuthedIndexLazyRoute;
  AuthedAddServerIndexLazyRoute: typeof AuthedAddServerIndexLazyRoute;
  AuthedAddServerFallbackOriginRouteRoute: typeof AuthedAddServerFallbackOriginRouteRoute;
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedCreateTimelineRouteLazyRoute: AuthedCreateTimelineRouteLazyRoute,
  AuthedAboutLazyRoute: AuthedAboutLazyRoute,
  AuthedIndexLazyRoute: AuthedIndexLazyRoute,
  AuthedAddServerIndexLazyRoute: AuthedAddServerIndexLazyRoute,
  AuthedAddServerFallbackOriginRouteRoute:
    AuthedAddServerFallbackOriginRouteRoute,
};

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren);

export interface FileRoutesByFullPath {
  "/auth": typeof AuthRouteRoute;
  "/login": typeof LoginRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "": typeof AuthedRouteWithChildren;
  "/create-timeline": typeof AuthedCreateTimelineRouteLazyRoute;
  "/about": typeof AuthedAboutLazyRoute;
  "/": typeof AuthedIndexLazyRoute;
  "/add-server": typeof AuthedAddServerIndexLazyRoute;
  "/add-server/fallback/$origin": typeof AuthedAddServerFallbackOriginRouteRoute;
}

export interface FileRoutesByTo {
  "/auth": typeof AuthRouteRoute;
  "/login": typeof LoginRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/create-timeline": typeof AuthedCreateTimelineRouteLazyRoute;
  "/about": typeof AuthedAboutLazyRoute;
  "/": typeof AuthedIndexLazyRoute;
  "/add-server": typeof AuthedAddServerIndexLazyRoute;
  "/add-server/fallback/$origin": typeof AuthedAddServerFallbackOriginRouteRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/auth": typeof AuthRouteRoute;
  "/login": typeof LoginRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/_authed": typeof AuthedRouteWithChildren;
  "/_authed/create-timeline": typeof AuthedCreateTimelineRouteLazyRoute;
  "/_authed/about": typeof AuthedAboutLazyRoute;
  "/_authed/": typeof AuthedIndexLazyRoute;
  "/_authed/add-server/": typeof AuthedAddServerIndexLazyRoute;
  "/_authed/add-server/fallback/$origin": typeof AuthedAddServerFallbackOriginRouteRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/auth"
    | "/login"
    | "/signup"
    | ""
    | "/create-timeline"
    | "/about"
    | "/"
    | "/add-server"
    | "/add-server/fallback/$origin";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/auth"
    | "/login"
    | "/signup"
    | "/create-timeline"
    | "/about"
    | "/"
    | "/add-server"
    | "/add-server/fallback/$origin";
  id:
    | "__root__"
    | "/auth"
    | "/login"
    | "/signup"
    | "/_authed"
    | "/_authed/create-timeline"
    | "/_authed/about"
    | "/_authed/"
    | "/_authed/add-server/"
    | "/_authed/add-server/fallback/$origin";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRoute;
  LoginRouteRoute: typeof LoginRouteRoute;
  SignupRouteRoute: typeof SignupRouteRoute;
  AuthedRoute: typeof AuthedRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  SignupRouteRoute: SignupRouteRoute,
  AuthedRoute: AuthedRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth",
        "/login",
        "/signup",
        "/_authed"
      ]
    },
    "/auth": {
      "filePath": "auth/route.tsx"
    },
    "/login": {
      "filePath": "login/route.tsx"
    },
    "/signup": {
      "filePath": "signup/route.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/create-timeline",
        "/_authed/about",
        "/_authed/",
        "/_authed/add-server/",
        "/_authed/add-server/fallback/$origin"
      ]
    },
    "/_authed/create-timeline": {
      "filePath": "_authed/create-timeline/route.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/about": {
      "filePath": "_authed/about.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/": {
      "filePath": "_authed/index.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/add-server/": {
      "filePath": "_authed/add-server/index.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/add-server/fallback/$origin": {
      "filePath": "_authed/add-server/fallback/$origin/route.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
